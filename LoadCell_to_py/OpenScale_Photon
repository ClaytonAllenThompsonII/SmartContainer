#include <OpenScale.h>
#include <Wire.h>
#include <AWSIoTDeviceSDK.h>
#include <Particle.h>
#include <TimeLib.h>

OpenScale scale;

//AWS IoT endpoint configuration
char* awsEndpoint = "your-iot-endpoint.amazonaws.com";
char* awsRegion = "us-east-1";
char* awsKey = "your-aws-key";
char* awsSecret = "your-aws-secret";
char* awsClientId = "your-aws-client-id";
char* awsTopic = "load_cell_data";

AWSIoTClient awsClient(awsEndpoint, awsClientId, awsKey, awsSecret); 

// -------------------------------Setup the Photon --------------------------
void setup() {

    Wire.setSpeed(100000) // Sets the I2C clock speed to 100KHZ. Must be called before begin()
    Wire.begin(); // initialize I2C bus
      
      Serial.begin(9600); // Set Baud Rate to 9600 //Debug Terminal
      Serial1.begin(9600) // TX, RX from OpenScale 

    scale.begin(); 

    //connect to the guest wifi
    Wifi.on();
    WiFi.setCredentials("guest-ssid", "guest-password"); // Similiar to WiFi.Begin(ssid,pass) Allows the application to set credentials for the Wi-Fi network from within the code. These credentials will be added to the device's memory, and the device will automatically attempt to connect to this network in the future.
    //Particle.connect(); // This connects the device to the Particle cloud (which is only for testing)
    waitFor(WiFi.ready, 60000);

  // Display message when connected to WiFi. This uses Wifi library to publish a message to the Particle cloud. This is for testing. 
    /*if (WiFi.ready()) {
    Particle.publish("device-connected", "Photon has connected to guest WiFi.");
  }*/

// Set timezone offset to local timezone (Eastern Time Zone)
  Time.zone(-5); 

  awsClient.enableMetrics(); // optional, enables metrics collection
  awsClient.setMetricsInterval(60000); // optional, sets metrics interval to 1 minute
  awsClient.connect();

}

// -------------------------------Photon Program Loop --------------------------
void loop() {

    String input; // stores user input as a string
    float weight; 
    time_t timestamp; 


//Prompt the user for Input
Serial.println("What are you weighing?");
while (!Serial.available()) {
  delay(100);
}
input = Serial.readStringUntil('\n'); //reads characters from the serial buffer/port into a String. The returned string is assigned to the variable 'input' object containing the characters read until the specified delimiter '\n' or newline (enter). 

//Format start string with uppercase letter
input.replace(0, 1, input.substring(0, 1,).toUpperCase()); 

//Format the start string with uppercase letters. 
input.replace(0, 1, input.substring(0, 1).toUppercase())

 
 scale.tare(); 

 // Read weight from load cells
 weight = scale.get()
    }




