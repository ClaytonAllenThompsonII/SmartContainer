#Code foundation as of 03.09.23 is attributed to WaveShapePlay and their Arduino_RealTimePlot public repository. 
#Real Time plot using a Serial Connection.
#Serial Connection reads weight data transmitted from Load Cell Sensors and HX711 library. 

import time
import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation


class AnimationPlot:

    def animate(self, i, dataList, ser):
        ser.write(b'x')                                     # Transmit the char 'g' to receive the Arduino data point
        arduinoData_string = ser.readline().decode('ascii') # Decode receive Arduino data as a formatted string
        #print(i)                                           # 'i' is a incrementing variable based upon frames = x argument

        try:
            arduinoData_float = float(arduinoData_string)   # Convert to float
            dataList.append(arduinoData_float)              # Add to the list holding the fixed number of points to animate

        except:                                             # Pass if data point is bad                               
            pass

        dataList = dataList[-100:]                           # Fix the list size so that the animation plot 'window' is x number of points
        
        ax.clear()                                          # Clear last data frame
        
        self.getPlotFormat()
        ax.plot(dataList)                                   # Plot new data frame
        

    def getPlotFormat(self):
        ax.set_ylim([0, 125])                              # Set Y axis limit of plot #change t0 MAX(Y)
        ax.set_title("Load Cell Weight Data ",
                      loc='center',fontstyle='oblique',fontsize='large')                       # Set title of figure
        ax.set_ylabel(' Weight (Lbs) ')                         # Set title of y axis - current reading is in grams. 
        ax.set_xlabel(' Real Time ')
        ax.set_autoscaley_on(True)
        ax.grid(color = 'powderblue')                            # add grid with color. 
        ax.axhline(y = 0.0, color = 'aliceblue', linestyle= '-') # adding horizontal reference line to chart where Y = 0.0. 
dataList = []                                           # Create empty list variable for later use
                                                        
fig = plt.figure()                                      # Create a new figure, Matplotlib plots fig is the 'higher level' plot window- think of as a tile object in Tableau. 
ax = fig.add_subplot(111, facecolor='lightskyblue')                              # Add the subplot to main figure window #Three integers (*nrows*, *ncols*, *index*). # Same as addsubplot(1,1,1)
realTimePlot = AnimationPlot()

# Establish Serial object with the serial port and set BAUD rate to match Arduino Port/rate. Use ls /dev/tty.* in the terminal to identify serial device. Put this in the " "
ser = serial.Serial("/dev/tty.usbserial-D309P9P0", 9600)   
time.sleep(2)                                           # Time delay for Arduino Serial initialization 

                                                        # Matplotlib Animation Fuction that takes takes care of real time plot.
                                                        # Note that 'fargs' parameter is where we pass in our dataList and Serial object. 
ani = animation.FuncAnimation(fig, realTimePlot.animate, frames=50, fargs=(dataList, ser), interval=100) 

plt.show()                                              # Keep Matplotlib plot persistent on screen until it is closed
ser.close()                                             # Close Serial connection when plot is closed